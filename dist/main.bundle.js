!function(o){var e={};function t(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return o[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=o,t.c=e,t.d=function(o,e,n){t.o(o,e)||Object.defineProperty(o,e,{enumerable:!0,get:n})},t.r=function(o){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})},t.t=function(o,e){if(1&e&&(o=t(o)),8&e)return o;if(4&e&&"object"==typeof o&&o&&o.__esModule)return o;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:o}),2&e&&"string"!=typeof o)for(var r in o)t.d(n,r,function(e){return o[e]}.bind(null,r));return n},t.n=function(o){var e=o&&o.__esModule?function(){return o.default}:function(){return o};return t.d(e,"a",e),e},t.o=function(o,e){return Object.prototype.hasOwnProperty.call(o,e)},t.p="",t(t.s=0)}([function(o,e,t){"use strict";window.DEV_ENV=!0,window.clog={consoleColor:{log:"color:#E48486; font-weight: 700; font-size: 1.125em; text-decoration: underline",hilight:"background: #FFFF00; color: black; font-size: 1.125em; font-weight:bold; line-height: 1.5; display: block; padding: 3px 5px",ok:"color:#fff; background-color:#32CD32; font-weight: bold;line-height:2; letter-spacing: 0.25em; display: block",bad:"color:#fff; background-color:#ff0033; font-weight: bold;line-height:3; letter-spacing: 0.25em; display: block",heading:"display: block; background-color: #222; color: #fff; text-align:center; padding: 7px 5px; font-size:1.5em; font-weight: bold; letter-spacing: 0.2em"},log:function(){for(var o=arguments.length,e=Array(o),t=0;t<o;t++)e[t]=arguments[t];var n=this.destructArgs(e);if(n&&window.DEV_ENV){var r=n.comment,l=n.values;console.log("%c"+r+" "+l,this.consoleColor.log)}},comment:function(){for(var o=arguments.length,e=Array(o),t=0;t<o;t++)e[t]=arguments[t];var n=this.destructArgs(e);if(n&&window.DEV_ENV){var r=n.comment,l=n.values;console.log("%c"+r+"%c"+l,this.consoleColor.log)}},hilight:function(){for(var o=arguments.length,e=Array(o),t=0;t<o;t++)e[t]=arguments[t];var n=this.destructArgs(e);if(n&&window.DEV_ENV){var r=n.comment,l=n.values;console.log("%c "+r+":- "+l,this.consoleColor.hilight)}},ok:function(){for(var o=arguments.length,e=Array(o),t=0;t<o;t++)e[t]=arguments[t];var n=this.destructArgs(e);if(n&&window.DEV_ENV){var r=n.comment,l=n.values;console.log("%c "+r+":- "+l,this.consoleColor.ok)}},good:function(){this.ok.apply(this,arguments)},bad:function(){for(var o=arguments.length,e=Array(o),t=0;t<o;t++)e[t]=arguments[t];var n=this.destructArgs(e);if(n&&window.DEV_ENV){var r=n.comment,l=n.values;console.log("%c "+r+":- "+l,this.consoleColor.bad)}},grp:function(o){window.DEV_ENV&&console.group("%c "+o,this.consoleColor.heading)},grpEnd:function(o){console.groupEnd(o)},destructArgs:function(){for(var o=arguments.length,e=Array(o),t=0;t<o;t++)e[t]=arguments[t];return!(e.length<=0)&&{comment:e[0][0],values:e[0].slice(1).join(" ")}}},clog.log("Testing:-","This","output"),clog.hilight("HIlighted text","and the values","the can go with it"),clog.ok("Comment for ok all green"),clog.grp("Group start"),clog.bad("something went wrong"),clog.grpEnd(),clog.good("This is good test"),clog.comment("How does this work","comma seperated","values")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,